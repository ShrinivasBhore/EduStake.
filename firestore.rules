rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Default rule: Deny all reads and writes unless explicitly allowed by other rules.
    // This is a good security practice.
    match /{document=**} {
      allow read, write: if false;
    }

    match /userProfiles/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      // No delete rule specified, so it defaults to false from the /{document=**} rule
    }

    match /messages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null &&
                         (resource.data.userId == request.auth.uid ||
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']));
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /savedChats/{savedChatId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /resources/{resourceId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null &&
                         (resource.data.userId == request.auth.uid ||
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'likes']));
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /resourceLikes/{likeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // No update specified
    }

    match /searchHistory/{searchId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // No update specified
    }
          
    match /channels/{channelId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
                         (resource.data.createdBy == request.auth.uid ||
                          (exists(resource.data.members[request.auth.uid]) && resource.data.members[request.auth.uid].role == 'admin') ||
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity', 'lastMessagePreview']));
      allow delete: if request.auth != null &&
                         (resource.data.createdBy == request.auth.uid ||
                          (exists(resource.data.members[request.auth.uid]) && resource.data.members[request.auth.uid].role == 'admin'));
    }
          
    match /communities/{communityId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
                         (resource.data.createdBy == request.auth.uid ||
                          (exists(resource.data.members[request.auth.uid]) && resource.data.members[request.auth.uid].role == 'admin'));
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
  }
}
